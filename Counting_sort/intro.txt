Counting Sort
Counting Sort is a non-comparison based sorting algorithm that operates on integers and works by counting the number of occurrences of each element in the input. It assumes that the input elements are integers within a known range.

Advantages:
    -Counting Sort has a time complexity of O(n + k), where n is the number of elements in the input array and k is the range of input.
    -It is efficient for a relatively small range of input data.
    -Counting Sort is stable, which means it maintains the relative order of equal elements.

Disadvantages:
    -It is not suitable for sorting general unbounded lists or lists with large ranges.

Applications:
    -Counting Sort is used in cases where the range of input data is known and reasonably small.
    -It is often used as a subroutine in other sorting algorithms like Radix Sort.

Real-Life Examples:
    -Sorting student scores in a specific range.
    -Sorting ages of people in a known range.

Time Complexity:
    -Best Case: O(n + k)
    -Worst Case: O(n + k)
    -Average Case: O(n + k)

Space Complexity:
    -O(n + k)

Counting Sort works by counting the number of occurrences of each element and using this information to determine the position of each element in the sorted array. It is particularly useful when the range of elements is small compared to the size of the list.
