Heap sort is a comparison-based sorting algorithm that leverages the properties of a binary heap. Its consistent time complexity and in-place sorting make it suitable for various applications, particularly when stability is not a primary concern.

Applications:
    -Efficiently sorts arrays and lists.
    -Used for external sorting in databases.
    -Can be employed in priority queue implementations.
    -Commonly used in operating systems for memory allocation.

Time Complexity:
    Best Case: O(n log n)
    Average Case: O(n log n)
    Worst Case: O(n log n)

Space Complexity:
    O(1) - In-place sorting algorithm.

Key Advantages:
    -Guarantees a consistent O(n log n) time complexity, making it reliable for large datasets.
    -Efficient in terms of memory usage as it operates in-place.
    -Stable sorting algorithm, meaning it maintains the relative order of equal elements.

Key Disadvantages:
    -Not as fast in practice as quicksort for many datasets.
    -Less cache-friendly compared to other algorithms.
